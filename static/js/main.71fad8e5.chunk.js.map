{"version":3,"sources":["index.ts"],"names":["fetch","then","res","text","gexf","graph","parse","Graph","container","document","getElementById","zoomInBtn","zoomOutBtn","zoomResetBtn","labelsThresholdRange","searchInput","searchSuggestions","renderer","Sigma","minCameraRatio","maxCameraRatio","allowInvalidContainer","renderEdgeLabels","camera","getCamera","addEventListener","animatedZoom","duration","animatedUnzoom","animatedReset","setSetting","value","getSetting","state","searchQuery","setSearchQuery","query","lcQuery","toLowerCase","suggestions","nodes","map","n","id","label","getNodeAttribute","filter","includes","length","selectedNode","undefined","nodePosition","getNodeDisplayData","animate","Set","refresh","setHoveredNode","node","hoveredNode","hoveredNeighbors","neighbors","innerHTML","join","clickedNode","clickMode","on","window","open","data","has","color","highlighted","edge","hasExtremity","hidden","source","target"],"mappings":"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","file":"static/js/main.71fad8e5.chunk.js","sourcesContent":["/**\n * This example shows how to load a GEXF graph file (using the dedicated\n * graphology parser), and display it with some basic map features: Zoom in and\n * out buttons, reset zoom button, and a slider to increase or decrease the\n * quantity of labels displayed on screen.\n */\n\nimport Sigma from \"sigma\";\nimport Graph from \"graphology\";\nimport { parse } from \"graphology-gexf/browser\";\nimport { Coordinates, EdgeDisplayData, NodeDisplayData } from \"sigma/types\";\n\n// Load external GEXF file:\nfetch(\"./fullSenate23.gexf\")\n  .then((res) => res.text())\n  .then((gexf) => {\n    // Parse GEXF string:\n    const graph = parse(Graph, gexf);\n\n    // Retrieve some useful DOM elements:\n    const container = document.getElementById(\"sigma-container\") as HTMLElement;\n    const zoomInBtn = document.getElementById(\"zoom-in\") as HTMLButtonElement;\n    const zoomOutBtn = document.getElementById(\"zoom-out\") as HTMLButtonElement;\n    const zoomResetBtn = document.getElementById(\n      \"zoom-reset\"\n    ) as HTMLButtonElement;\n    const labelsThresholdRange = document.getElementById(\n      \"labels-threshold\"\n    ) as HTMLInputElement;\n    const searchInput = document.getElementById(\n      \"search-input\"\n    ) as HTMLInputElement;\n    const searchSuggestions = document.getElementById(\n      \"suggestions\"\n    ) as HTMLDataListElement;\n\n    // Instanciate sigma:\n    const renderer = new Sigma(graph, container, {\n      minCameraRatio: 0.01,\n      maxCameraRatio: 3,\n      allowInvalidContainer: true,\n      renderEdgeLabels: true\n    });\n    const camera = renderer.getCamera();\n\n    // Bind zoom manipulation buttons\n    zoomInBtn.addEventListener(\"click\", () => {\n      camera.animatedZoom({ duration: 600 });\n    });\n    zoomOutBtn.addEventListener(\"click\", () => {\n      camera.animatedUnzoom({ duration: 600 });\n    });\n    zoomResetBtn.addEventListener(\"click\", () => {\n      camera.animatedReset({ duration: 600 });\n    });\n\n    // Bind labels threshold to range input\n    labelsThresholdRange.addEventListener(\"input\", () => {\n      renderer.setSetting(\n        \"labelRenderedSizeThreshold\",\n        +labelsThresholdRange.value\n      );\n    });\n\n    // Set proper range initial value:\n    labelsThresholdRange.value =\n      renderer.getSetting(\"labelRenderedSizeThreshold\") + \"\";\n\n    // Type and declare internal state:\n    interface State {\n      hoveredNode?: string;\n      searchQuery: string;\n\n      // State derived from query:\n      selectedNode?: string;\n      suggestions?: Set<string>;\n\n      // State derived from hovered node:\n      hoveredNeighbors?: Set<string>;\n    }\n    const state: State = { searchQuery: \"\" };\n\n    // Feed the datalist autocomplete values:\n    searchSuggestions.innerHTML = graph\n      .nodes()\n      .map(\n        (node) =>\n          `<option value=\"${graph.getNodeAttribute(node, \"label\")}\"></option>`\n      )\n      .join(\"\\n\");\n\n    // Actions:\n    function setSearchQuery(query: string) {\n      state.searchQuery = query;\n\n      if (searchInput.value !== query) searchInput.value = query;\n\n      if (query) {\n        const lcQuery = query.toLowerCase();\n        const suggestions = graph\n          .nodes()\n          .map((n) => ({\n            id: n,\n            label: graph.getNodeAttribute(n, \"label\") as string\n          }))\n          .filter(({ label }) => label.toLowerCase().includes(lcQuery));\n\n        // If we have a single perfect match, them we remove the suggestions, and\n        // we consider the user has selected a node through the datalist\n        // autocomplete:\n        if (suggestions.length === 1 && suggestions[0].label === query) {\n          state.selectedNode = suggestions[0].id;\n          state.suggestions = undefined;\n\n          // Move the camera to center it on the selected node:\n          const nodePosition = renderer.getNodeDisplayData(\n            state.selectedNode\n          ) as Coordinates;\n          renderer.getCamera().animate(nodePosition, {\n            duration: 500\n          });\n        }\n        // Else, we display the suggestions list:\n        else {\n          state.selectedNode = undefined;\n          state.suggestions = new Set(suggestions.map(({ id }) => id));\n        }\n      }\n      // If the query is empty, then we reset the selectedNode / suggestions state:\n      else {\n        state.selectedNode = undefined;\n        state.suggestions = undefined;\n      }\n\n      // Refresh rendering:\n      renderer.refresh();\n    }\n\n    function setHoveredNode(node?: string) {\n      if (node) {\n        state.hoveredNode = node;\n        state.hoveredNeighbors = new Set(graph.neighbors(node));\n      } else {\n        state.hoveredNode = undefined;\n        state.hoveredNeighbors = undefined;\n      }\n\n      // Refresh rendering:\n      renderer.refresh();\n    }\n\n    // Bind search input interactions:\n    searchInput.addEventListener(\"input\", () => {\n      setSearchQuery(searchInput.value || \"\");\n    });\n    searchInput.addEventListener(\"blur\", () => {\n      setSearchQuery(\"\");\n    });\n\n    var clickedNode = undefined;\n    var clickMode = false;\n    // Bind graph interactions:\n    renderer.on(\"clickNode\", ({ node }) => {\n      if (clickedNode === node) {\n        clickedNode = undefined;\n        setHoveredNode(undefined);\n        clickMode = false;\n      } else {\n        clickedNode = node;\n        clickMode = true;\n        setHoveredNode(node);\n      }\n    });\n    renderer.on(\"enterNode\", ({ node }) => {\n      if (clickMode === false) {\n        setHoveredNode(node);\n      }\n    });\n    renderer.on(\"leaveNode\", ({ node }) => {\n      if (clickMode === false) {\n        if (clickedNode !== node) {\n          setHoveredNode(undefined);\n        }\n      }\n    });\n    renderer.on(\"doubleClickNode\", ({ node }) => {\n      window.open(\"https://www.opensecrets.org/search?q=\" + node);\n    });\n\n    renderer.setSetting(\"nodeReducer\", (node, data) => {\n      const res: Partial<NodeDisplayData> = { ...data };\n\n      if (\n        state.hoveredNeighbors &&\n        !state.hoveredNeighbors.has(node) &&\n        state.hoveredNode !== node\n      ) {\n        res.label = \"\";\n        res.color = \"#f6f6f6\";\n      }\n\n      if (state.selectedNode === node) {\n        res.highlighted = true;\n      } else if (state.suggestions && !state.suggestions.has(node)) {\n        res.label = \"\";\n        res.color = \"#f6f6f6\";\n      }\n\n      return res;\n    });\n\n    // Render edges accordingly to the internal state:\n    // 1. If a node is hovered, the edge is hidden if it is not connected to the\n    //    node\n    // 2. If there is a query, the edge is only visible if it connects two\n    //    suggestions\n    renderer.setSetting(\"edgeReducer\", (edge, data) => {\n      const res: Partial<EdgeDisplayData> = { ...data };\n\n      if (state.hoveredNode && !graph.hasExtremity(edge, state.hoveredNode)) {\n        res.hidden = true;\n      }\n\n      if (\n        state.suggestions &&\n        (!state.suggestions.has(graph.source(edge)) ||\n          !state.suggestions.has(graph.target(edge)))\n      ) {\n        res.hidden = true;\n      }\n\n      return res;\n    });\n  });\n"],"sourceRoot":""}