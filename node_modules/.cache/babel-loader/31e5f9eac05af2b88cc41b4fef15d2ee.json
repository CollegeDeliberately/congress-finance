{"ast":null,"code":"import _objectSpread from\"/Users/declanbradley/Documents/GitHub/senate-finance/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * This example shows how to load a GEXF graph file (using the dedicated\n * graphology parser), and display it with some basic map features: Zoom in and\n * out buttons, reset zoom button, and a slider to increase or decrease the\n * quantity of labels displayed on screen.\n */import Sigma from\"sigma\";import Graph from\"graphology\";import{parse}from\"graphology-gexf/browser\";// Load external GEXF file:\nfetch(\"./fullSenate23.gexf\").then(function(res){return res.text();}).then(function(gexf){// Parse GEXF string:\nvar graph=parse(Graph,gexf);// Retrieve some useful DOM elements:\nvar container=document.getElementById(\"sigma-container\");var zoomInBtn=document.getElementById(\"zoom-in\");var zoomOutBtn=document.getElementById(\"zoom-out\");var zoomResetBtn=document.getElementById(\"zoom-reset\");var labelsThresholdRange=document.getElementById(\"labels-threshold\");var searchInput=document.getElementById(\"search-input\");var searchSuggestions=document.getElementById(\"suggestions\");// Instanciate sigma:\nvar renderer=new Sigma(graph,container,{minCameraRatio:0.01,maxCameraRatio:3,allowInvalidContainer:true,renderEdgeLabels:true});var camera=renderer.getCamera();// Bind zoom manipulation buttons\nzoomInBtn.addEventListener(\"click\",function(){camera.animatedZoom({duration:600});});zoomOutBtn.addEventListener(\"click\",function(){camera.animatedUnzoom({duration:600});});zoomResetBtn.addEventListener(\"click\",function(){camera.animatedReset({duration:600});});// Bind labels threshold to range input\nlabelsThresholdRange.addEventListener(\"input\",function(){renderer.setSetting(\"labelRenderedSizeThreshold\",+labelsThresholdRange.value);});// Set proper range initial value:\nlabelsThresholdRange.value=renderer.getSetting(\"labelRenderedSizeThreshold\")+\"\";// Type and declare internal state:\nvar state={searchQuery:\"\"};// Feed the datalist autocomplete values:\nsearchSuggestions.innerHTML=graph.nodes().map(function(node){return\"<option value=\\\"\".concat(graph.getNodeAttribute(node,\"label\"),\"\\\"></option>\");}).join(\"\\n\");// Actions:\nfunction setSearchQuery(query){state.searchQuery=query;if(searchInput.value!==query)searchInput.value=query;if(query){var lcQuery=query.toLowerCase();var suggestions=graph.nodes().map(function(n){return{id:n,label:graph.getNodeAttribute(n,\"label\")};}).filter(function(_ref){var label=_ref.label;return label.toLowerCase().includes(lcQuery);});// If we have a single perfect match, them we remove the suggestions, and\n// we consider the user has selected a node through the datalist\n// autocomplete:\nif(suggestions.length===1&&suggestions[0].label===query){state.selectedNode=suggestions[0].id;state.suggestions=undefined;// Move the camera to center it on the selected node:\nvar nodePosition=renderer.getNodeDisplayData(state.selectedNode);renderer.getCamera().animate(nodePosition,{duration:500});}// Else, we display the suggestions list:\nelse{state.selectedNode=undefined;state.suggestions=new Set(suggestions.map(function(_ref2){var id=_ref2.id;return id;}));}}// If the query is empty, then we reset the selectedNode / suggestions state:\nelse{state.selectedNode=undefined;state.suggestions=undefined;}// Refresh rendering:\nrenderer.refresh();}function setHoveredNode(node){if(node){state.hoveredNode=node;state.hoveredNeighbors=new Set(graph.neighbors(node));}else{state.hoveredNode=undefined;state.hoveredNeighbors=undefined;}// Refresh rendering:\nrenderer.refresh();}// Bind search input interactions:\nsearchInput.addEventListener(\"input\",function(){setSearchQuery(searchInput.value||\"\");});searchInput.addEventListener(\"blur\",function(){setSearchQuery(\"\");});var clickedNode=undefined;var clickMode=false;// Bind graph interactions:\nrenderer.on(\"clickNode\",function(_ref3){var node=_ref3.node;if(clickedNode===node){clickedNode=undefined;setHoveredNode(undefined);clickMode=false;}else{clickedNode=node;clickMode=true;setHoveredNode(node);}});renderer.on(\"enterNode\",function(_ref4){var node=_ref4.node;if(clickMode===false){setHoveredNode(node);}});renderer.on(\"leaveNode\",function(_ref5){var node=_ref5.node;if(clickMode===false){if(clickedNode!==node){setHoveredNode(undefined);}}});renderer.on(\"doubleClickNode\",function(_ref6){var node=_ref6.node;window.open(\"https://www.opensecrets.org/search?q=\"+node);});renderer.setSetting(\"nodeReducer\",function(node,data){var res=_objectSpread({},data);if(state.hoveredNeighbors&&!state.hoveredNeighbors.has(node)&&state.hoveredNode!==node){res.label=\"\";res.color=\"#f6f6f6\";}if(state.selectedNode===node){res.highlighted=true;}else if(state.suggestions&&!state.suggestions.has(node)){res.label=\"\";res.color=\"#f6f6f6\";}return res;});// Render edges accordingly to the internal state:\n// 1. If a node is hovered, the edge is hidden if it is not connected to the\n//    node\n// 2. If there is a query, the edge is only visible if it connects two\n//    suggestions\nrenderer.setSetting(\"edgeReducer\",function(edge,data){var res=_objectSpread({},data);if(state.hoveredNode&&!graph.hasExtremity(edge,state.hoveredNode)){res.hidden=true;}if(state.suggestions&&(!state.suggestions.has(graph.source(edge))||!state.suggestions.has(graph.target(edge)))){res.hidden=true;}return res;});});","map":{"version":3,"names":["Sigma","Graph","parse","fetch","then","res","text","gexf","graph","container","document","getElementById","zoomInBtn","zoomOutBtn","zoomResetBtn","labelsThresholdRange","searchInput","searchSuggestions","renderer","minCameraRatio","maxCameraRatio","allowInvalidContainer","renderEdgeLabels","camera","getCamera","addEventListener","animatedZoom","duration","animatedUnzoom","animatedReset","setSetting","value","getSetting","state","searchQuery","innerHTML","nodes","map","node","getNodeAttribute","join","setSearchQuery","query","lcQuery","toLowerCase","suggestions","n","id","label","filter","includes","length","selectedNode","undefined","nodePosition","getNodeDisplayData","animate","Set","refresh","setHoveredNode","hoveredNode","hoveredNeighbors","neighbors","clickedNode","clickMode","on","window","open","data","has","color","highlighted","edge","hasExtremity","hidden","source","target"],"sources":["/Users/declanbradley/Documents/GitHub/senate-finance/src/index.ts"],"sourcesContent":["/**\n * This example shows how to load a GEXF graph file (using the dedicated\n * graphology parser), and display it with some basic map features: Zoom in and\n * out buttons, reset zoom button, and a slider to increase or decrease the\n * quantity of labels displayed on screen.\n */\n\nimport Sigma from \"sigma\";\nimport Graph from \"graphology\";\nimport { parse } from \"graphology-gexf/browser\";\nimport { Coordinates, EdgeDisplayData, NodeDisplayData } from \"sigma/types\";\n\n// Load external GEXF file:\nfetch(\"./fullSenate23.gexf\")\n  .then((res) => res.text())\n  .then((gexf) => {\n    // Parse GEXF string:\n    const graph = parse(Graph, gexf);\n\n    // Retrieve some useful DOM elements:\n    const container = document.getElementById(\"sigma-container\") as HTMLElement;\n    const zoomInBtn = document.getElementById(\"zoom-in\") as HTMLButtonElement;\n    const zoomOutBtn = document.getElementById(\"zoom-out\") as HTMLButtonElement;\n    const zoomResetBtn = document.getElementById(\n      \"zoom-reset\"\n    ) as HTMLButtonElement;\n    const labelsThresholdRange = document.getElementById(\n      \"labels-threshold\"\n    ) as HTMLInputElement;\n    const searchInput = document.getElementById(\n      \"search-input\"\n    ) as HTMLInputElement;\n    const searchSuggestions = document.getElementById(\n      \"suggestions\"\n    ) as HTMLDataListElement;\n\n    // Instanciate sigma:\n    const renderer = new Sigma(graph, container, {\n      minCameraRatio: 0.01,\n      maxCameraRatio: 3,\n      allowInvalidContainer: true,\n      renderEdgeLabels: true\n    });\n    const camera = renderer.getCamera();\n\n    // Bind zoom manipulation buttons\n    zoomInBtn.addEventListener(\"click\", () => {\n      camera.animatedZoom({ duration: 600 });\n    });\n    zoomOutBtn.addEventListener(\"click\", () => {\n      camera.animatedUnzoom({ duration: 600 });\n    });\n    zoomResetBtn.addEventListener(\"click\", () => {\n      camera.animatedReset({ duration: 600 });\n    });\n\n    // Bind labels threshold to range input\n    labelsThresholdRange.addEventListener(\"input\", () => {\n      renderer.setSetting(\n        \"labelRenderedSizeThreshold\",\n        +labelsThresholdRange.value\n      );\n    });\n\n    // Set proper range initial value:\n    labelsThresholdRange.value =\n      renderer.getSetting(\"labelRenderedSizeThreshold\") + \"\";\n\n    // Type and declare internal state:\n    interface State {\n      hoveredNode?: string;\n      searchQuery: string;\n\n      // State derived from query:\n      selectedNode?: string;\n      suggestions?: Set<string>;\n\n      // State derived from hovered node:\n      hoveredNeighbors?: Set<string>;\n    }\n    const state: State = { searchQuery: \"\" };\n\n    // Feed the datalist autocomplete values:\n    searchSuggestions.innerHTML = graph\n      .nodes()\n      .map(\n        (node) =>\n          `<option value=\"${graph.getNodeAttribute(node, \"label\")}\"></option>`\n      )\n      .join(\"\\n\");\n\n    // Actions:\n    function setSearchQuery(query: string) {\n      state.searchQuery = query;\n\n      if (searchInput.value !== query) searchInput.value = query;\n\n      if (query) {\n        const lcQuery = query.toLowerCase();\n        const suggestions = graph\n          .nodes()\n          .map((n) => ({\n            id: n,\n            label: graph.getNodeAttribute(n, \"label\") as string\n          }))\n          .filter(({ label }) => label.toLowerCase().includes(lcQuery));\n\n        // If we have a single perfect match, them we remove the suggestions, and\n        // we consider the user has selected a node through the datalist\n        // autocomplete:\n        if (suggestions.length === 1 && suggestions[0].label === query) {\n          state.selectedNode = suggestions[0].id;\n          state.suggestions = undefined;\n\n          // Move the camera to center it on the selected node:\n          const nodePosition = renderer.getNodeDisplayData(\n            state.selectedNode\n          ) as Coordinates;\n          renderer.getCamera().animate(nodePosition, {\n            duration: 500\n          });\n        }\n        // Else, we display the suggestions list:\n        else {\n          state.selectedNode = undefined;\n          state.suggestions = new Set(suggestions.map(({ id }) => id));\n        }\n      }\n      // If the query is empty, then we reset the selectedNode / suggestions state:\n      else {\n        state.selectedNode = undefined;\n        state.suggestions = undefined;\n      }\n\n      // Refresh rendering:\n      renderer.refresh();\n    }\n\n    function setHoveredNode(node?: string) {\n      if (node) {\n        state.hoveredNode = node;\n        state.hoveredNeighbors = new Set(graph.neighbors(node));\n      } else {\n        state.hoveredNode = undefined;\n        state.hoveredNeighbors = undefined;\n      }\n\n      // Refresh rendering:\n      renderer.refresh();\n    }\n\n    // Bind search input interactions:\n    searchInput.addEventListener(\"input\", () => {\n      setSearchQuery(searchInput.value || \"\");\n    });\n    searchInput.addEventListener(\"blur\", () => {\n      setSearchQuery(\"\");\n    });\n\n    var clickedNode = undefined;\n    var clickMode = false;\n    // Bind graph interactions:\n    renderer.on(\"clickNode\", ({ node }) => {\n      if (clickedNode === node) {\n        clickedNode = undefined;\n        setHoveredNode(undefined);\n        clickMode = false;\n      } else {\n        clickedNode = node;\n        clickMode = true;\n        setHoveredNode(node);\n      }\n    });\n    renderer.on(\"enterNode\", ({ node }) => {\n      if (clickMode === false) {\n        setHoveredNode(node);\n      }\n    });\n    renderer.on(\"leaveNode\", ({ node }) => {\n      if (clickMode === false) {\n        if (clickedNode !== node) {\n          setHoveredNode(undefined);\n        }\n      }\n    });\n    renderer.on(\"doubleClickNode\", ({ node }) => {\n      window.open(\"https://www.opensecrets.org/search?q=\" + node);\n    });\n\n    renderer.setSetting(\"nodeReducer\", (node, data) => {\n      const res: Partial<NodeDisplayData> = { ...data };\n\n      if (\n        state.hoveredNeighbors &&\n        !state.hoveredNeighbors.has(node) &&\n        state.hoveredNode !== node\n      ) {\n        res.label = \"\";\n        res.color = \"#f6f6f6\";\n      }\n\n      if (state.selectedNode === node) {\n        res.highlighted = true;\n      } else if (state.suggestions && !state.suggestions.has(node)) {\n        res.label = \"\";\n        res.color = \"#f6f6f6\";\n      }\n\n      return res;\n    });\n\n    // Render edges accordingly to the internal state:\n    // 1. If a node is hovered, the edge is hidden if it is not connected to the\n    //    node\n    // 2. If there is a query, the edge is only visible if it connects two\n    //    suggestions\n    renderer.setSetting(\"edgeReducer\", (edge, data) => {\n      const res: Partial<EdgeDisplayData> = { ...data };\n\n      if (state.hoveredNode && !graph.hasExtremity(edge, state.hoveredNode)) {\n        res.hidden = true;\n      }\n\n      if (\n        state.suggestions &&\n        (!state.suggestions.has(graph.source(edge)) ||\n          !state.suggestions.has(graph.target(edge)))\n      ) {\n        res.hidden = true;\n      }\n\n      return res;\n    });\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}